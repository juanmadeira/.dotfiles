#!/usr/bin/env python3
# autor: https://github.com/SuchithSridhar/Linux-Webcam-Control

import os
import sys
import argparse
import time

'''
Ways to use script:

./webcam-control --help
./webcam-control -h

./webcam-control devices

./webcam-control status --webcams "GC21 Video"
./webcam-control status --webcams "XYZ"

./webcam-control off --webcams "GC21 Video"
./webcam-control on --webcams "GC21 Video"

./webcam-control toggle --webcams "GC21 Video"
./webcam-control toggle -W "GC21 Video" "XYZ" --ignore-missing-devices
./webcam-control toggle -w "GC21 Video" "XYZ" -i

./webcam-control status -w "GC21 Video" --continuous --interval 1
./webcam-control status -w "GC21 Video" -c -i 1
./webcam-control status -w "GC21 Video" -c --on "Webcam On" --off "Webcam Off"
'''

devices_directory = '/sys/bus/usb/devices'
drivers_directory = '/sys/bus/usb/drivers/usb'

help_messages = {
    'description': ('Webcam Control Script: '
                    'Control the state of specified webcams.'),

    'action': ('- status: Check if the specified webcams are on or off.\n'
               '- toggle: Toggle the state of the specified webcams.\n'
               '- off: Turn off the specified webcams.\n'
               '- on: Turn on the specified webcams.\n'
               '- devices: List all USB devices and exit.'),

    'webcams': ('List of webcams to control (required for all actions except'
                ' "devices").\n\tExample: --webcams "GC21 Video" "XYZ".'),

    'ignore_missing_devices': ('Ignore missing devices and proceed '
                               'with the action.'),

    'devices': 'List all USB devices and exit.',

    'continuous': 'Keep checking the status of the webcam continuously.',

    'interval': 'Interval in seconds between continuous status checks.',
    'device_check_interval': ('Interval in seconds between checking to see '
                              'if the webcam is still plugged in.'),

    'on_output': 'Message to print when the webcam is on.',

    'off_output': 'Message to print when the webcam is off.',
    'missing_output': 'Message to print when webcam is missing.',
}


def get_devices(webcams: list[str] = []
                ) -> (dict[str, str], list[str], list[str]):
    '''
    Get all the devices associated with each provided webcam.

    The webcam's list can be empty as the returned found_products
    array can still be the list of all devices/webcams.
    '''

    found_devices = {}
    found_products = []
    missing_webcams = set(webcams)

    for device in os.listdir(devices_directory):
        product_path = os.path.join(devices_directory, device, 'product')
        if os.path.isfile(product_path):
            with open(product_path, 'r') as product_file:
                product = product_file.read().strip()
                found_products.append(product)
                if product in webcams:
                    found_devices[product] = device
                    missing_webcams.discard(product)

    return found_devices, found_products, list(missing_webcams)


def list_devices():
    _, products, _ = get_devices([])
    print("USB Devices found:")
    for product in products:
        print("\t", product)


def check_status(devices: dict[str, str]) -> dict[str, bool]:
    webcam_is_active = {}
    for webcam, device in devices.items():
        device_dir = os.path.join(drivers_directory, device)
        webcam_is_active[webcam] = os.path.isdir(device_dir)

    return webcam_is_active


def toggle_devices(devices: dict[str, str]) -> dict[str, bool]:
    for webcam, device in devices.items():
        device_dir = os.path.join(drivers_directory, device)
        action = 'unbind' if os.path.isdir(device_dir) else 'bind'

        with open(os.path.join(drivers_directory, action), 'w') as file:
            file.write(device)


def turn_off_devices(devices: dict[str, str]):
    for webcam, device in devices.items():
        device_dir = os.path.join(drivers_directory, device)
        if os.path.isdir(device_dir):
            with open(os.path.join(drivers_directory, 'unbind'), 'w') as file:
                file.write(device)


def turn_on_devices(devices: dict[str, str]):
    for webcam, device in devices.items():
        device_dir = os.path.join(drivers_directory, device)
        if not os.path.isdir(device_dir):
            with open(os.path.join(drivers_directory, 'bind'), 'w') as file:
                file.write(device)


def continuous_status(webcam: str, interval: int, device_check_interval: int,
                      on_output: str, off_output: str, missing_output: str):
    '''
    This function will run until interrupted by something like an external
    interrupt (Ctrl-C) or the process is killed.
    '''

    device_dir = None
    last_checked = time.time() - device_check_interval

    while True:
        current_time = time.time()
        
        # Recheck devices list every check_interval seconds
        if (current_time - last_checked >= device_check_interval):
            devices, _, _ = get_devices([webcam])
            device = devices.get(webcam, None)
            if device:
                device_dir = os.path.join(drivers_directory, device)
            else:
                device_dir = None
        
            last_checked = current_time
        
        if device_dir and os.path.isdir(device_dir):
            output = on_output
        elif device_dir is None:
            output = missing_output
        else:
            output = off_output
        
        print(output, flush=True)
        time.sleep(interval)


def main():

    parser = argparse.ArgumentParser(
        description=help_messages['description'],
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument('action', choices=[
                        'status', 'toggle', 'off', 'on', 'devices'],
                        help=help_messages['action'])
    parser.add_argument('-w', '--webcams', nargs='+',
                        help=help_messages['webcams'])
    parser.add_argument('-i', '--ignore-missing-devices',
                        action='store_true',
                        help=help_messages['ignore_missing_devices'])
    parser.add_argument('-c', '--continuous', action='store_true',
                        help=help_messages['continuous'])
    parser.add_argument('-t', '--interval', type=int, default=1,
                        help=help_messages['interval'])
    parser.add_argument('-d', '--device-check-interval', type=int, default=10,
                        dest="device_check_interval",
                        help=help_messages['device_check_interval'])
    parser.add_argument('--on', dest='on_output', default='On',
                        help=help_messages['on_output'])
    parser.add_argument('--off', dest='off_output', default='Off',
                        help=help_messages['off_output'])
    parser.add_argument('--miss', dest='missing_output', default='Not Found',
                        help=help_messages['missing_output'])

    args = parser.parse_args()

    if args.action == 'devices':
        list_devices()
        sys.exit(0)

    if not args.webcams:
        print("Error: --webcams is required for actions other than 'devices'.")
        parser.print_help()
        sys.exit(1)

    webcams = args.webcams
    if len(webcams) > 1 and args.continuous:
        print("Error: --continuous can only be used with a single webcam.")
        sys.exit(1)

    devices, products, missing_webcams = get_devices(webcams)

    if not devices and not args.continuous:
        print("Error: None of the specified webcams were found.")
        sys.exit(1)

    if (missing_webcams and not args.ignore_missing_devices
            and not args.continuous):
        print("Error: The following webcams were not found: ",
              ', '.join(missing_webcams))
        sys.exit(1)

    if (missing_webcams and args.ignore_missing_devices
            and not args.continuous):
        print("Warning: The following webcams not found and will be ignored: ",
              ', '.join(missing_webcams))

    if args.action == "status":
        if args.continuous:
            continuous_status(
                webcams[0],
                args.interval,
                args.device_check_interval,
                args.on_output,
                args.off_output,
                args.missing_output
            )
        else:
            status = check_status(devices)
            for webcam, state in status.items():
                msg = "On" if state else "Off"
                print(f"{webcam}: {msg}")

    elif args.action == "toggle":
        toggle_devices(devices)

    elif args.action == "off":
        turn_off_devices(devices)

    elif args.action == "on":
        turn_on_devices(devices)


if __name__ == "__main__":
    main()
